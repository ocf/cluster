apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: keycloak
    app.kubernetes.io/instance: keycloak
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 26.3.2
    helm.sh/chart: keycloak-24.9.0
  name: keycloak
  namespace: keycloak
spec:
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: keycloak
      app.kubernetes.io/instance: keycloak
      app.kubernetes.io/name: keycloak
  serviceName: keycloak-headless
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: adfb9eebefc0b02efff8259591e60a139a63df1839e7c3b3055ac1ad0db038d4
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-inject-secret-keytab: kvv2/data/keycloak/keycloak
        vault.hashicorp.com/agent-inject-template-keytab: '{{- with secret "kvv2/data/keycloak/keycloak"
          -}}{{ base64Decode .Data.data.keytab }}{{- end}}'
        vault.hashicorp.com/role: keycloak
        vault.hashicorp.com/service: https://vault.ocf.berkeley.edu/
      labels:
        app.kubernetes.io/app-version: 26.3.2
        app.kubernetes.io/component: keycloak
        app.kubernetes.io/instance: keycloak
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/version: 26.3.2
        helm.sh/chart: keycloak-24.9.0
    spec:
      affinity:
        nodeAffinity: null
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: keycloak
                  app.kubernetes.io/name: keycloak
              topologyKey: kubernetes.io/hostname
            weight: 1
      automountServiceAccountToken: true
      containers:
      - env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: KC_BOOTSTRAP_ADMIN_PASSWORD_FILE
          value: /opt/bitnami/keycloak/secrets/admin-password
        - name: KEYCLOAK_DATABASE_PASSWORD_FILE
          value: /opt/bitnami/keycloak/secrets/db-password
        - name: KEYCLOAK_HTTP_RELATIVE_PATH
          value: /
        - name: KC_SPI_ADMIN_REALM
          value: master
        envFrom:
        - configMapRef:
            name: keycloak-env-vars
        image: docker.io/bitnami/keycloak:26.3.2-debian-12-r0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 300
          periodSeconds: 1
          successThreshold: 1
          tcpSocket:
            port: http
          timeoutSeconds: 5
        name: keycloak
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9000
          name: metrics
          protocol: TCP
        - containerPort: 7800
          name: discovery
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /realms/master
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 4096Mi
          requests:
            cpu: 100m
            memory: 2048Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
          seLinuxOptions: {}
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /tmp
          name: empty-dir
          subPath: tmp-dir
        - mountPath: /bitnami/keycloak
          name: empty-dir
          subPath: app-volume-dir
        - mountPath: /opt/bitnami/keycloak/conf
          name: empty-dir
          subPath: app-conf-dir
        - mountPath: /opt/bitnami/keycloak/lib/quarkus
          name: empty-dir
          subPath: app-quarkus-dir
        - mountPath: /opt/bitnami/keycloak/data
          name: empty-dir
          subPath: app-data-dir
        - mountPath: /opt/bitnami/keycloak/providers
          name: empty-dir
          subPath: app-providers-dir
        - mountPath: /opt/bitnami/keycloak/themes
          name: empty-dir
          subPath: app-themes-dir
        - mountPath: /opt/bitnami/keycloak/secrets
          name: keycloak-secrets
        - mountPath: /etc/krb5.conf
          name: krb5-conf
          subPath: krb5.conf
        - mountPath: /opt/bitnami/keycloak/themes/keywind
          name: keycloak
          subPath: themes/keywind/theme/keywind
      enableServiceLinks: true
      initContainers:
      - args:
        - -ec
        - '. /opt/bitnami/scripts/liblog.sh


          info "Copying writable dirs to empty dir"

          # In order to not break the application functionality we need to make some

          # directories writable, so we need to copy it to an empty dir volume

          cp -r --preserve=mode,timestamps /opt/bitnami/keycloak/lib/quarkus /emptydir/app-quarkus-dir

          cp -r --preserve=mode,timestamps /opt/bitnami/keycloak/data /emptydir/app-data-dir

          cp -r --preserve=mode,timestamps /opt/bitnami/keycloak/providers /emptydir/app-providers-dir

          cp -r --preserve=mode,timestamps /opt/bitnami/keycloak/themes /emptydir/app-themes-dir

          info "Copy operation completed"

          '
        command:
        - /bin/bash
        image: docker.io/bitnami/keycloak:26.3.2-debian-12-r0
        imagePullPolicy: IfNotPresent
        name: prepare-write-dirs
        resources:
          limits:
            cpu: 500m
            memory: 4096Mi
          requests:
            cpu: 100m
            memory: 2048Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
          seLinuxOptions: {}
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /emptydir
          name: empty-dir
      - args:
        - mkdir -p /keycloak/themes/keywind && (git -C /keycloak/themes/keywind pull
          || git clone https://github.com/lukin/keywind /keycloak/themes/keywind)
        command:
        - /bin/sh
        - -c
        image: alpine/git
        name: download-resources
        volumeMounts:
        - mountPath: /keycloak
          name: keycloak
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: keycloak
      volumes:
      - emptyDir: {}
        name: empty-dir
      - name: keycloak-secrets
        projected:
          sources:
          - secret:
              name: keycloak
          - secret:
              items:
              - key: password
                path: db-password
              name: keycloak.ocf-keycloak.credentials.postgresql.acid.zalan.do
      - configMap:
          name: krb5-conf
        name: krb5-conf
      - name: keycloak
        persistentVolumeClaim:
          claimName: keycloak
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
