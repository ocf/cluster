apiVersion: v1
data:
  check.py: "\"\"\"Show information about OCF users.\"\"\"\n\nimport grp\nimport string\n\
    \nfrom ocflib.account import search\nfrom ocflib.infra import ldap\nfrom sopel\
    \ import plugin\n\n\nGROUP_COLOR_MAPPING = {\n    \"ocf\": \"\\x0314\",  # gray\n\
    \    \"sorry\": \"\\x0304\",  # red\n    \"opstaff\": \"\\x0303\",  # green\n\
    \    \"ocfstaff\": \"\\x0302\",  # blue\n    \"ocfroot\": \"\\x0307\",  # orange\n\
    \    \"ocfapphost\": \"\\x0310\",  # cyan\n    \"ocfofficers\": \"\\x0306\", \
    \ # purple\n    \"ocfalumni\": \"\\x0313\",  # pink\n}\n\n\n@plugin.command(\"\
    check\")\ndef check(bot, trigger):\n    \"\"\"Print information about an OCF user.\"\
    \"\"\n    user = trigger.group(2).strip()\n    attrs = search.user_attrs(user)\n\
    \n    if attrs is not None:\n        groups = [grp.getgrgid(attrs[\"gidNumber\"\
    ]).gr_name]\n        groups.extend(\n            sorted(group.gr_name for group\
    \ in grp.getgrall() if user in group.gr_mem),\n        )\n        groups = [\n\
    \            \"{}{}\\x0f\".format(GROUP_COLOR_MAPPING.get(group, \"\"), group)\n\
    \            for group in groups\n        ]\n\n        if \"creationTime\" in\
    \ attrs:\n            created = attrs[\"creationTime\"].strftime(\"%Y-%m-%d\"\
    )\n        else:\n            created = \"unknown\"\n\n        bot.say(\n    \
    \        \"{user} ({uid}) | {name} | created {created} | groups: {groups}\".format(\n\
    \                user=user,\n                uid=attrs[\"uidNumber\"],\n     \
    \           name=attrs[\"cn\"][0],\n                created=created,\n       \
    \         groups=\", \".join(groups),\n            ),\n        )\n    else:\n\
    \        bot.say(f\"{user} does not exist\")\n\n\ndef alphanum(word):\n    return\
    \ \"\".join(c for c in word.lower() if c in string.ascii_lowercase)\n\n\n@plugin.command(\"\
    checkacct\")\ndef checkacct(bot, trigger):\n    \"\"\"Print matching OCF usernames.\"\
    \"\"\n    search_term = trigger.group(2).strip()\n    keywords = search_term.split()\n\
    \n    if len(keywords) > 0:\n        search = \"(&{})\".format(\n            \"\
    \".join(\n                # all keywords must match either uid or cn\n       \
    \         \"(|(uid=*{keyword}*)(cn=*{keyword}*))\".format(\n                 \
    \   keyword=alphanum(keyword),\n                )\n                for keyword\
    \ in keywords\n            ),\n        )\n\n        with ldap.ldap_ocf() as c:\n\
    \            c.search(\n                ldap.OCF_LDAP_PEOPLE,\n              \
    \  search,\n                attributes=(\"uid\", \"cn\"),\n                size_limit=5,\n\
    \            )\n\n            if len(c.response) > 0:\n                bot.reply(\n\
    \                    \", \".join(\n                        sorted(\n         \
    \                   \"{} ({})\".format(\n                                entry[\"\
    attributes\"][\"uid\"][0],\n                                entry[\"attributes\"\
    ][\"cn\"][0],\n                            )\n                            for\
    \ entry in c.response\n                        ),\n                    ),\n  \
    \              )\n            else:\n                bot.reply(\"no results found\"\
    )\n"
  create.py: "\"\"\"Approve accounts.\"\"\"\n\nimport ssl\nimport textwrap\nimport\
    \ threading\nimport time\nfrom traceback import format_exc\n\nfrom sopel import\
    \ plugin\nfrom sopel.config import types\nfrom celery import Celery\nfrom celery\
    \ import exceptions\nfrom celery.events import EventReceiver\nfrom kombu import\
    \ Connection\nfrom ocflib.account.submission import get_tasks\n\nIRC_CHANNELS_ANNOUNCE\
    \ = \"#administrivia\"\nIRC_CHANNELS_OPER = \"#root\"\n\ntasks = None\n\n\n\n\
    class CelerySection(types.StaticSection):\n    broker = types.SecretAttribute(\"\
    broker\", str)\n    backend = types.SecretAttribute(\"backend\", str)\n\n\ndef\
    \ setup(bot):\n    bot.settings.define_section(\"celery\", CelerySection)\n\n\
    \    def add_thread(func):\n        def thread_func():\n            try:\n   \
    \             func(bot)\n            except Exception as ex:\n               \
    \ error_msg = \"ircbot exception in thread {thread}.{function}: {exception}\"\
    .format(\n                    thread=func.__module__,\n                    function=func.__name__,\n\
    \                    exception=ex,\n                )\n                bot.say(error_msg,\
    \ \"#rebuild\")\n                bot.handle_error(\n                    textwrap.dedent(\n\
    \                        \"\"\"\n                    {error}\n\n             \
    \       {traceback}\n                    \"\"\",\n                    ).format(\n\
    \                        error=error_msg,\n                        traceback=format_exc(),\n\
    \                    ),\n                )\n            # For now, just let it\
    \ fail silently. We should consider uncommenting this block.\n            # finally:\n\
    \            # The thread has stopped, probably because it threw an error\n  \
    \          # This shouldn't happen, so we stop the entire bot\n            # os._exit(1)\n\
    \n        thread = threading.Thread(target=thread_func, daemon=True)\n       \
    \ thread.start()\n\n    add_thread(celery_listener)\n\n\n@plugin.command(\"approve\"\
    )\n@plugin.require_admin(reply=True)\ndef approve(bot, trigger):\n    \"\"\"Approve\
    \ a pending account.\"\"\"\n    user_name = trigger.group(2)\n    tasks.approve_request.delay(user_name)\n\
    \    bot.reply(f\"approved {user_name}, the account is being created\")\n\n\n\
    @plugin.command(\"reject\")\n@plugin.require_admin(reply=True)\ndef reject(bot,\
    \ trigger):\n    \"\"\"Reject a pending account.\"\"\"\n    user_name = trigger.group(2)\n\
    \    tasks.reject_request.delay(user_name)\n    bot.reply(f\"rejected {user_name},\
    \ better luck next time\")\n\n\n@plugin.command(\"list\")\n@plugin.require_admin(reply=True)\n\
    def list_pending(bot, trigger):\n    \"\"\"List accounts pending approval.\"\"\
    \"\n    task = tasks.get_pending_requests.delay()\n    try:\n        task.wait(timeout=5)\n\
    \        if task.result:\n            for request in task.result:\n          \
    \      bot.reply(request)\n        else:\n            bot.reply(\"no pending requests\"\
    )\n    except exceptions.TimeoutError:\n        bot.reply(\"timed out loading\
    \ list of requests, sorry!\")\n\n\ndef celery_listener(bot):\n    \"\"\"Listen\
    \ for events from Celery, relay to IRC.\"\"\"\n    global tasks\n\n    while len(bot.channels.keys())\
    \ <= 0:\n        time.sleep(2)\n\n    celery = Celery(\n        broker=bot.settings.celery.broker,\n\
    \        backend=bot.settings.celery.backend,\n    )\n    celery.conf.broker_use_ssl\
    \ = {\n        \"ssl_ca_certs\": \"/etc/ssl/certs/ca-certificates.crt\",\n   \
    \     \"ssl_cert_reqs\": ssl.CERT_REQUIRED,\n    }\n\n    celery.conf.redis_backend_use_ssl\
    \ = {\n        \"ssl_ca_certs\": \"/etc/ssl/certs/ca-certificates.crt\",\n   \
    \     \"ssl_cert_reqs\": ssl.CERT_REQUIRED,\n    }\n\n    # TODO: stop using pickle\n\
    \    celery.conf.task_serializer = \"pickle\"\n    celery.conf.result_serializer\
    \ = \"pickle\"\n    celery.conf.accept_content = {\"pickle\"}\n\n    tasks = get_tasks(celery)\n\
    \n    connection = Connection(\n        bot.settings.celery.broker,\n        ssl={\n\
    \            \"ssl_ca_certs\": \"/etc/ssl/certs/ca-certificates.crt\",\n     \
    \       \"ssl_cert_reqs\": ssl.CERT_REQUIRED,\n        },\n    )\n\n    def bot_announce(targets,\
    \ message):\n        for target in targets:\n            bot.say(message, target)\n\
    \n    def on_account_created(event):\n        request = event[\"request\"]\n\n\
    \        if request[\"calnet_uid\"]:\n            uid_or_gid = \"Calnet UID: {}\"\
    .format(request[\"calnet_uid\"])\n        elif request[\"callink_oid\"]:\n   \
    \         uid_or_gid = \"Callink OID: {}\".format(request[\"callink_oid\"])\n\
    \        else:\n            uid_or_gid = \"No Calnet UID or OID set\"\n\n    \
    \    bot_announce(\n            IRC_CHANNELS_ANNOUNCE,\n            \"{user} created\
    \ ({real_name}, {uid_or_gid})\".format(\n                user=request[\"user_name\"\
    ],\n                real_name=request[\"real_name\"],\n                uid_or_gid=uid_or_gid,\n\
    \            ),\n        )\n\n    def on_account_submitted(event):\n        request\
    \ = event[\"request\"]\n        bot_announce(\n            IRC_CHANNELS_OPER,\n\
    \            \"{user} ({real_name}) needs approval: {reasons}\".format(\n    \
    \            user=request[\"user_name\"],\n                real_name=request[\"\
    real_name\"],\n                reasons=\", \".join(request[\"reasons\"]),\n  \
    \          ),\n        )\n\n    def on_account_approved(event):\n        request\
    \ = event[\"request\"]\n        bot_announce(\n            IRC_CHANNELS_ANNOUNCE,\n\
    \            \"{user} was approved, now pending creation.\".format(\n        \
    \        user=request[\"user_name\"],\n            ),\n        )\n\n    def on_account_rejected(event):\n\
    \        request = event[\"request\"]\n        bot_announce(\n            IRC_CHANNELS_ANNOUNCE,\n\
    \            \"{user} was rejected.\".format(\n                user=request[\"\
    user_name\"],\n            ),\n        )\n\n    while True:\n        with connection\
    \ as conn:\n            recv = EventReceiver(\n                conn,\n       \
    \         app=celery,\n                handlers={\n                    \"ocflib.account_created\"\
    : on_account_created,\n                    \"ocflib.account_submitted\": on_account_submitted,\n\
    \                    \"ocflib.account_approved\": on_account_approved,\n     \
    \               \"ocflib.account_rejected\": on_account_rejected,\n          \
    \      },\n            )\n            recv.capture(limit=None, timeout=None)\n"
  lab.py: "\"\"\"Get information about the lab.\"\"\"\n\nfrom ocflib.lab.stats import\
    \ staff_in_lab\nfrom ocflib.lab.stats import users_in_lab_count\n\nfrom sopel\
    \ import plugin\n\n\n@plugin.rule(r\"is ([a-z]+) in the lab\")\ndef in_lab(bot,\
    \ trigger):\n    \"\"\"Check if a staffer is in the lab.\"\"\"\n    username =\
    \ trigger.group(2).strip()\n    for session in staff_in_lab():\n        if username\
    \ == session.user:\n            bot.reply(f\"{username} is in the lab\")\n   \
    \         break\n    else:\n        bot.reply(f\"{username} is not in the lab\"\
    )\n\n\ndef _prevent_ping(staffer):\n    \"\"\"Hack to prevent pinging the person\
    \ by inserting a zero-width no-break space in their name.\"\"\"\n    return staffer[0]\
    \ + \"\\u2060\" + staffer[1:]\n\n\n@plugin.rule(r\"(who is|who's) in the lab\"\
    , r\"(?i)w+i+t+l+\")\ndef who_is_in_lab(bot, trigger):\n    \"\"\"Report on who\
    \ is currently in the lab.\"\"\"\n    staff = {session.user for session in staff_in_lab()}\n\
    \    total = users_in_lab_count()\n\n    if total != 1:\n        are_number_people\
    \ = f\"are {total} people\"\n    else:\n        are_number_people = \"is 1 person\"\
    \n\n    if staff:\n        staff_list = \": {}\".format(\n            \", \".join(sorted(_prevent_ping(staffer)\
    \ for staffer in staff))\n        )\n    else:\n        staff_list = \"\"\n\n\
    \    bot.reply(\n        \"there {} in the lab, including {} staff{}\".format(\n\
    \            are_number_people,\n            len(staff),\n            staff_list,\n\
    \        ),\n    )\n"
kind: ConfigMap
metadata:
  name: sopel-plugins
