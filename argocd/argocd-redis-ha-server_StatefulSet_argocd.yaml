apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations: {}
  labels:
    app: redis-ha
    argocd-redis-ha: replica
    chart: redis-ha-4.22.3
    heritage: Helm
    release: argocd
  name: argocd-redis-ha-server
  namespace: argocd
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  selector:
    matchLabels:
      app: redis-ha
      release: argocd
  serviceName: argocd-redis-ha
  template:
    metadata:
      annotations:
        checksum/init-config: 84ccf6a9b8a7fa3ae5b62a8f17d6c65a5197e9605da9b2761179bf942828eefe
        prometheus.io/path: /metrics
        prometheus.io/port: '9121'
        prometheus.io/scrape: 'true'
      labels:
        app: redis-ha
        argocd-redis-ha: replica
        release: argocd
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: redis-ha
                argocd-redis-ha: replica
                release: argocd
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: false
      containers:
      - args:
        - /data/conf/redis.conf
        command:
        - redis-server
        image: redis:7.0.5-alpine
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - /readonly-config/trigger-failover-if-master.sh
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/redis_liveness.sh
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 15
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/redis_readiness.sh
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 15
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /readonly-config
          name: config
          readOnly: true
        - mountPath: /data
          name: data
        - mountPath: /health
          name: health
      - args:
        - /data/conf/sentinel.conf
        command:
        - redis-sentinel
        image: redis:7.0.5-alpine
        imagePullPolicy: IfNotPresent
        lifecycle: {}
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/sentinel_liveness.sh
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 15
        name: sentinel
        ports:
        - containerPort: 26379
          name: sentinel
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/sentinel_liveness.sh
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 3
          timeoutSeconds: 15
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /health
          name: health
      - args:
        - /readonly-config/fix-split-brain.sh
        command:
        - sh
        env:
        - name: SENTINEL_ID_0
          value: 3c0d9c0320bb34888c2df5757c718ce6ca992ce6
        - name: SENTINEL_ID_1
          value: 40000915ab58c3fa8fd888fb8b24711944e6cbb4
        - name: SENTINEL_ID_2
          value: 2bbec7894d954a8af3bb54d13eaec53cb024e2ca
        image: redis:7.0.5-alpine
        imagePullPolicy: IfNotPresent
        name: split-brain-fix
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /readonly-config
          name: config
          readOnly: true
        - mountPath: /data
          name: data
      - args: null
        env:
        - name: REDIS_ADDR
          value: redis://localhost:6379
        image: oliver006/redis_exporter:v1.43.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 3
        name: redis-exporter
        ports:
        - containerPort: 9121
          name: exporter-port
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 3
        resources: {}
        volumeMounts: null
      initContainers:
      - args:
        - /readonly-config/init.sh
        command:
        - sh
        env:
        - name: SENTINEL_ID_0
          value: 3c0d9c0320bb34888c2df5757c718ce6ca992ce6
        - name: SENTINEL_ID_1
          value: 40000915ab58c3fa8fd888fb8b24711944e6cbb4
        - name: SENTINEL_ID_2
          value: 2bbec7894d954a8af3bb54d13eaec53cb024e2ca
        image: redis:7.0.5-alpine
        imagePullPolicy: IfNotPresent
        name: config-init
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /readonly-config
          name: config
          readOnly: true
        - mountPath: /data
          name: data
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: argocd-redis-ha
      terminationGracePeriodSeconds: 60
      volumes:
      - configMap:
          name: argocd-redis-ha-configmap
        name: config
      - configMap:
          defaultMode: 493
          name: argocd-redis-ha-health-configmap
        name: health
      - emptyDir: {}
        name: data
  updateStrategy:
    type: RollingUpdate
